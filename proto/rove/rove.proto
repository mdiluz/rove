syntax = "proto3";

// Rove
//
// Rove is an asychronous nomadic game about exploring a planet as part of a loose community
package rove;

option go_package = "github.com/mdiluz/rove/pkg/rove";

import "google/api/annotations.proto";

service Rove {
    // Server status
    // 
    // Responds with various details about the current server status
    rpc ServerStatus(ServerStatusRequest) returns (ServerStatusResponse) {
        option (google.api.http) = {
            get: "/server-status"
          };
    }

    // Register an account
    // 
    // Tries to register an account with the given name
    rpc Register(RegisterRequest) returns (RegisterResponse) {
        option (google.api.http) = {
            post: "/register"
            body: "*"
          };
    }

    // Send commands to rover
    // 
    // Sending commands to this endpoint will queue them to be executed during the following ticks, in the order sent
    rpc Command(CommandRequest) returns (CommandResponse) {
        option (google.api.http) = {
            post: "/command"
            body: "*"
          };
    }

    // Get radar information
    // 
    // Gets the radar output for the given rover
    rpc Radar(RadarRequest) returns (RadarResponse) {
        option (google.api.http) = {
            post: "/radar"
            body: "*"
          };
    }

    // Get rover information
    // 
    // Gets information for the account's rover
    rpc Status(StatusRequest) returns (StatusResponse) {
        option (google.api.http) = {
            post: "/status"
            body: "*"
          };
    }
}

message Command {
    // The command to execute
    // "move" - Move the rover in a direction, requires bearing
    // "stash" - Stashes item at current location in rover inventory
    // "repair" - Repairs the rover using an inventory object
    // "recharge" - Waits a tick to add more charge to the rover
    string command = 1;

    // The bearing, example: NE
    string bearing = 2;
}

message CommandRequest {
    // The account to execute these commands
    Account account = 1;

    // The set of desired commands
    repeated Command commands = 2;
}

// Empty placeholder
message CommandResponse {}

message Error {
    // An explanation for the HTTP error returned
    string error = 1;
}

message RadarRequest {
    // The account for this request
    Account account = 1;
}

message RadarResponse {
    // The range in tiles from the rover of the radar data
    int32 range = 1;

    // A 1D array representing range*2 + 1 squared set of tiles, origin bottom left and in row->column order
    bytes tiles = 2;

    // A similar array to the tile array, but containing objects
    bytes objects = 3;
}

message RegisterRequest {
    // The desired account name
    string name = 1;
}

// Empty placeholder
message RegisterResponse{
    // The registered account information
    Account account = 1;
}

message StatusRequest {
    // The account for this request
    Account account = 1;
}

message Log {
    // The unix timestamp of the log
    string time = 1;

    // The text of the log
    string text = 2;
}

message StatusResponse {
    // The name of the rover
    string name = 1;

    // Position of the rover in world coordinates
    Vector position = 2;

    // The range of this rover's radar
    int32 range = 3;

    // The items in the rover inventory
    bytes inventory = 4;

    // The capacity of the inventory
    int32 capacity = 5;

    // The current health of the rover
    int32 integrity = 6;

    // The maximum health of the rover
    int32 maximumIntegrity = 7;

    // The energy stored in the rover
    int32 charge = 8;

    // The max energy the rover can store
    int32 maximumCharge = 9;

    // The set of currently incoming commands for this tick
    repeated Command incomingCommands = 10;

    // The set of currently queued commands
    repeated Command queuedCommands = 11;

    // The most recent logs
    repeated Log logs = 12;
}

// Empty placeholder
message ServerStatusRequest {}

message ServerStatusResponse {
    // The version of the server in v{major}.{minor}-{delta}-{sha} form
    string version = 1;

    // Whether the server is ready to accept requests
    bool ready = 2;

    // The tick rate of the server in minutes (how many minutes per tick)
    int32 tickRate = 3;

    // The current tick of the server
    int32 currentTick = 4;

    // The time the next tick will occur
    string next_tick = 5;
}

message Vector {
    int32 x = 1;
    int32 y = 2;
}

message Account {
    string name = 1;
    string secret = 2;
}